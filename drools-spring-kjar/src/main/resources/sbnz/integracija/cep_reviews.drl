package sbnz.integracija;

import ftn.sbnz.model.company.Company;
import ftn.sbnz.model.job_offer.JobOfferReview;
import ftn.sbnz.model.enums.MedalRank;
import ftn.sbnz.model.enums.ReviewStatus;

import ftn.sbnz.events.ReviewDeclinedEvent;
import ftn.sbnz.events.MaliciousReviewerEvent;
import ftn.sbnz.events.DisabledUserEvent;
import ftn.sbnz.events.UserAccountStatusEvent;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.sql.Timestamp;
import java.util.List;
import java.util.Set;


salience 100
rule "UserReview attempted - check if he's to be banned (3 malicious reviewer events)"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId) and
        Number(intValue > 2) from accumulate (MaliciousReviewerEvent(jobSeekerId == $userId), count(1))
    then
        modify ($fact) {
            setAllowed(false),
            setBanned(true)
        }
        delete($fact);
end

salience 75
rule "UserReview attempted - not allowed (malicious event in last 15 days)"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId, $eventTime: eventTime) and
        $maliciousEvent: MaliciousReviewerEvent(jobSeekerId == $userId, $endDate: endDate, $eventTime before $endDate)
    then
        modify ($fact) {
            setAllowed(false),
            setBanned(false)
        }
        delete($fact);
end

salience 50
rule "UserReview attempted - allowed (no malicious event in last 15 days)"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId, $eventTime: eventTime) and
        $maliciousEvent: MaliciousReviewerEvent(jobSeekerId == $userId, $endDate: endDate, $eventTime after $endDate) 
    then
        modify ($fact) {
            setAllowed(true),
            setBanned(false)
        }
        delete($fact);
end


salience 25
rule "UserReview attempted - if it passed all checks set to allow"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent()
    then
        modify ($fact) {
            setAllowed(true),
            setBanned(false)
        }
        delete($fact);
end



rule "ReviewDeclinedEvent added - review declined"
    agenda-group "job-offer-review-added"
    when
        $jobOfferReview: JobOfferReview (status == ReviewStatus.DECLINED, $user: poster)
    then
        System.out.println("Review from user with username " + $user.getUsername() + " review declined! New ReviewDeclinedEvent added.");
        ReviewDeclinedEvent event = new ReviewDeclinedEvent($user.getId());
        insert(event);
        delete($jobOfferReview);
end

rule "MaliciousReviewerEvent added - 3 reviews declined in 10 days"
    agenda-group "job-offer-review-added"
    when
        $user: JobSeeker($id: id) and
        $eventCounter: Number(intValue > 2) from accumulate (ReviewDeclinedEvent ($jobSeekerId: jobSeekerId, $jobSeekerId == $id) over window:time( 15s ), count(1))
    then
        System.out.println($eventCounter + " ReviewDeclinedEvents from user with username " + $user.getUsername() + "! New MaliciousReviewerEvent added.");
        MaliciousReviewerEvent event = new MaliciousReviewerEvent($user.getId());
        insert(event);
end

rule "Disable user - MaliciousReviewerEvent happened 3 times in last 90 days"
    agenda-group "job-offer-review-added"
    when
        $user: JobSeeker($id: id) and
        $eventCounter: Number(intValue > 2) from accumulate (MaliciousReviewerEvent ($jobSeekerId: jobSeekerId, $jobSeekerId == $id) over window:time( 90d ), count(1))
    then
        System.out.println($eventCounter + " MaliciousReviewerEvents from user with username " + $user.getUsername() + "! User suspended for 120 days!");
        DisabledUserEvent event = new DisabledUserEvent($user.getId());
        insert(event);
end
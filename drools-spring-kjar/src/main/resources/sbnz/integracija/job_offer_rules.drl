package sbnz.integracija;

import ftn.sbnz.model.job_position.JobPosition;
import ftn.sbnz.model.job_position.JobPositionSuggestion;
import ftn.sbnz.model.job_position.JobPositionRating;

import ftn.sbnz.model.job_offer.JobOffer;
import ftn.sbnz.model.job_offer.JobOfferSuggestion;
import ftn.sbnz.model.job_offer.JobOfferRating;

import ftn.sbnz.model.user.JobSeeker;
import ftn.sbnz.model.user.WorkingExperience;

import ftn.sbnz.model.technology.Technology;
import ftn.sbnz.model.technology.TechnologyImportance;
import ftn.sbnz.model.technology.TechnologyProficiency;

import ftn.sbnz.model.programming_language.ProgrammingLanguage;
import ftn.sbnz.model.programming_language.ProgrammingProficiency;
import ftn.sbnz.model.programming_language.ProgrammingImportance;

import ftn.sbnz.model.language.Language;
import ftn.sbnz.model.language.LanguageProficiency;
import ftn.sbnz.model.language.LanguageImportance;

import ftn.sbnz.model.knowledge.Knowledge;
import ftn.sbnz.model.knowledge.KnowledgeProficiency;
import ftn.sbnz.model.knowledge.KnowledgeImportance;

import ftn.sbnz.model.enums.SeniorityLevel;
import ftn.sbnz.model.enums.SkillProficiency;
import ftn.sbnz.model.enums.JobOfferCategory;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Optional;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

import java.lang.StringBuilder;
import java.lang.Integer;
import java.lang.Object;


rule "JobOfferSuggestion - phase 1 - offer selecting"
	agenda-group "jos-p1"
	lock-on-active
	when 
		$jobOfferSuggestion: 
					JobOfferSuggestion($offerRatings: offerRatings, $user: jobSeeker) 
					and
		forall(JobOfferRating(rating == 0) from $offerRatings) 
		and
		$offer: JobOffer() 
		and
		$jobPositionSuggestions: 
					List(size > 0) from collect (JobPositionSuggestion(jobSeeker.getId() == $user.getId())) 
					and
		$latestJobPositionSuggestions: 
					JobPositionSuggestion() from $jobPositionSuggestions.get($jobPositionSuggestions.size() - 1)
					and
		//todo: query
		Number(intValue >= 1) from accumulate (JobPositionRating($jobPosition: jobPosition, jobPosition.getTitle == $offer.getPosition().getTitle())
		 											   from $latestJobPositionSuggestions.getPositionRatings(),
													   count($jobPosition)
		 										)
	then
		JobOfferRating $jor = new JobOfferRating();
		$jor.setRating(0);
		$jor.setCategory(JobOfferCategory.NONE);
		$jor.setDescription("");
		$jor.setJobOffer($offer);
		modify($jobOfferSuggestion) {
			getOfferRatings().add($jor)
		}
		insert($jor);
		System.out.println("Phase 1 - Added job offer from company: " + $offer.getCompany().getName() + " for position " + $offer.getPosition().getTitle());
end


rule "JobOfferSuggestion - phase 2 - mandatory programming languages  (exist)"
	agenda-group "jos-p2"
	lock-on-active
	when 
		$jobOfferRating: 
					JobOfferRating(rating == 0, $progImportances: jobOffer.getProgrammingImportances()) 
		and 
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
		and
		$userProgrammingLang: 
					List() from accumulate(ProgrammingProficiency($progLang : programmingLanguage.getName()) 
					   	   from $user.getProgrammingProficiencies(),
					       collectList($progLang)) 
		and
		$offerProgImportance: 
					ProgrammingImportance(optional == false, $userProgrammingLang contains programmingProficiency.getProgrammingLanguage().getName())
					from $progImportances 
		and
		$userProficiency: 
					ProgrammingProficiency(programmingLanguage.getName() == $offerProgImportance.getProgrammingProficiency().getProgrammingLanguage().getName()) 
					from $user.getProgrammingProficiencies()
	then
		int $difference = $userProficiency.getProficiency().skillDifference($offerProgImportance.getProgrammingProficiency().getProficiency());
		int $points = $offerProgImportance.getImportance() * $difference;
		String $newDescription = "Programming language - " + $userProficiency.getProgrammingLanguage().getName() + " - points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($points),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 2 (mandatory exists) - JobOfferSuggestion with points " + $points + " for position " + $jobPositionName  + " in company " + $companyName);	
end


rule "JobOfferSuggestion - phase 2 - mandatory programming languages (not exist)"
	agenda-group "jos-p2"
	lock-on-active
	when 
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $progImportances: jobOffer.getProgrammingImportances()) 
					and 
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userProgrammingLang: 
					List() from accumulate(ProgrammingProficiency($progLang : programmingLanguage.getName()) 
						   from $user.getProgrammingProficiencies(),
						   collectList($progLang)) 
					and
		$offerProgImportance: 
					ProgrammingImportance(optional == false, $userProgrammingLang not contains programmingProficiency.getProgrammingLanguage().getName())
					from $progImportances
	then
		int $points = $offerProgImportance.getImportance() * $offerProgImportance.getProgrammingProficiency().getProficiency().getValue() * (-1);
		int $newRating = $jobOfferRating.getRating() + $points;
		String $language = $offerProgImportance.getProgrammingProficiency().getProgrammingLanguage().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Missing user proficiency for mandatory programming language - " + $language + " - negative points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 2 (mandatory not exists) - JobOfferSuggestion with points " + $points + " for position " + $jobPositionName  + " in company " + $companyName);	
end


rule "JobOfferSuggestion - phase 2 - optional programming languages"
	agenda-group "jos-p2"
	lock-on-active
	when 
		//TODO: prebrojati optional jezike u offeru i prebrojati njegove jezike za novi bonus koeficijente
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $progImportances: jobOffer.getProgrammingImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userProgrammingLang: 
					List() from accumulate(ProgrammingProficiency($progLang : programmingLanguage.getName()) 
						   from $user.getProgrammingProficiencies(),
						   collectList($progLang)) 
					and
		$offerProgImportance: 
					ProgrammingImportance(optional == true, $userProgrammingLang contains programmingProficiency.getProgrammingLanguage().getName())
					from $progImportances
					and
		$userProficiency: 
					ProgrammingProficiency(programmingLanguage.getName() == $offerProgImportance.getProgrammingProficiency().getProgrammingLanguage().getName()) 
					from $user.getProgrammingProficiencies()
	then 
		int $points = $offerProgImportance.getImportance() * $userProficiency.getProficiency().getValue();
		int $newRating = $jobOfferRating.getRating() + $points;
		String $language = $offerProgImportance.getProgrammingProficiency().getProgrammingLanguage().getName();
		String $newDescription = $jobOfferRating.getDescription() + "User proficiency for optional programming language - " + $language + " - points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 2 (optional) - JobOfferSuggestion with points " + $points + " for position " + $jobPositionName  + " in company " + $companyName);
end


rule "JobOfferSuggestion - phase 3 - technology (exist)"
	agenda-group "jos-p3"
	lock-on-active
	when 
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $techImportances: jobOffer.getTechnologyImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userTech: 
					List() from accumulate(TechnologyProficiency($technology : technology.getName()) 
					from $user.getTechnologyProficiencies(),
				   	collectList($technology)) 
					and
		$offerTechImportance: 
					TechnologyImportance($userTech contains technologyProficiency.getTechnology().getName())
					from $techImportances 
					and
		$userProficiency: 
					TechnologyProficiency(technology.getName() == $offerTechImportance.getTechnologyProficiency().getTechnology().getName()) 
					from $user.getTechnologyProficiencies()
	then
		int $difference = $userProficiency.getProficiency().skillDifference($offerTechImportance.getTechnologyProficiency().getProficiency());
		int $points =  $difference * $offerTechImportance.getImportance();
		int $newRating = $jobOfferRating.getRating() + $points;
		String $technology = $userProficiency.getTechnology().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Technology - " + $technology + " - points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		
		System.out.println("Phase 3 (technology exists) - JobOfferSuggestion with points " + $points + " for technology " + $technology + " for position " + $jobPositionName  + " in company " + $companyName);
end


rule "JobOfferSuggestion - phase 3 - technology (not exist)"
	agenda-group "jos-p3"
	lock-on-active
	when 
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $techImportances: jobOffer.getTechnologyImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userTech: 
					List() from accumulate(TechnologyProficiency($technology : technology.getName()) 
					from $user.getTechnologyProficiencies(),
				   	collectList($technology)) 
					and
		$offerTechImportance: 
					TechnologyImportance($userTech not contains technologyProficiency.getTechnology().getName())
					from $techImportances
	then
		int $points = $offerTechImportance.getImportance() * $offerTechImportance.getTechnologyProficiency().getProficiency().getValue() * (-1);
		int $newRating = $jobOfferRating.getRating() + $points;
		String $technology = $offerTechImportance.getTechnologyProficiency().getTechnology().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Missing user proficiency for technology - " + $technology + " - negative points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 3 (technology not exists) - JobOfferSuggestion with points " + $points + " for position " + $jobPositionName  + " in company " + $companyName);
end


rule "JobOfferSuggestion - phase 4 - knowledge (exist)"
	agenda-group "jos-p4"
	lock-on-active
	when
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $knowledgeImportances: jobOffer.getKnowledgeImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userKnowledge: 
					List() from accumulate(KnowledgeProficiency($knowledge : knowledge.getName()) 
					from $user.getKnowledgeProficiencies(),
				   	collectList($knowledge)) 
					and
		$offerKnowledgeImportance: 
					KnowledgeImportance($userKnowledge contains knowledgeProficiency.getKnowledge().getName())
					from $knowledgeImportances 
					and
		$userProficiency: 
					KnowledgeProficiency(knowledge.getName() == $offerKnowledgeImportance.getKnowledgeProficiency().getKnowledge().getName()) 
					from $user.getKnowledgeProficiencies()
	then
		int $difference = $userProficiency.getProficiency().skillDifference($offerKnowledgeImportance.getKnowledgeProficiency().getProficiency());
		int $points =  $difference * $offerKnowledgeImportance.getImportance();
		int $newRating = $jobOfferRating.getRating() + $points;
		String $knowledge = $userProficiency.getKnowledge().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Knowledge - " + $knowledge + " - points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		
		System.out.println("Phase 4 (knowledge exists) - JobOfferSuggestion with points " + $points + " for knowledge " + $knowledge + " for position " + $jobPositionName  + " in company " + $companyName);
end


rule "JobOfferSuggestion - phase 4 - knowledge (not exist)"
	agenda-group "jos-p4"
	lock-on-active
	when
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $knowledgeImportances: jobOffer.getKnowledgeImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userKnowledge: 
					List() from accumulate(KnowledgeProficiency($knowledge : knowledge.getName()) 
					from $user.getKnowledgeProficiencies(),
				   	collectList($knowledge)) 
					and
		$offerKnowledgeImportance: 
					KnowledgeImportance($userKnowledge contains knowledgeProficiency.getKnowledge().getName())
					from $knowledgeImportances
	then
		int $points = $offerKnowledgeImportance.getImportance() * $offerKnowledgeImportance.getKnowledgeProficiency().getProficiency().getValue() * (-1);
		int $newRating = $jobOfferRating.getRating() + $points;
		String $knowledge = $offerKnowledgeImportance.getKnowledgeProficiency().getKnowledge().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Missing user proficiency for knowledge - " + $knowledge + " - negative points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 4 (knowledge not exists) - JobOfferSuggestion with points " + $points + " for position " + $jobPositionName  + " in company " + $companyName);
end


rule "JobOfferSuggestion - phase 5 - language"
	agenda-group "jos-p5"
	lock-on-active
	when
		//TODO: daj mu neke bouns poene ako zna jos neke strane jezike koji nisu zahtevani
		$jobOfferRating: 
					JobOfferRating(category == JobOfferCategory.NONE, $languageImportances: jobOffer.getLanguageImportances()) 
					and
		$jobOfferSuggestion: 
					JobOfferSuggestion($user: jobSeeker, offerRatings contains $jobOfferRating) 
					and
		$userLanguage: 
					List() from accumulate(LanguageProficiency($language : language.getName()) 
					from $user.getLanguageProficiencies(),
				   	collectList($language)) 
					and
		$offerLanguageImportance: 
					LanguageImportance($userLanguage contains languageProficiency.getLanguage().getName())
					from $languageImportances 
					and
		$userProficiency: 
					LanguageProficiency(language.getName() == $offerLanguageImportance.getLanguageProficiency().getLanguage().getName()) 
					from $user.getLanguageProficiencies()
	then
		int $difference = $userProficiency.getProficiency().skillDifference($offerLanguageImportance.getLanguageProficiency().getProficiency());
		int $points =  $difference * $offerLanguageImportance.getImportance();
		int $newRating = $jobOfferRating.getRating() + $points;
		String $language = $userProficiency.getLanguage().getName();
		String $newDescription = $jobOfferRating.getDescription() + "Language - " + $language + " - points: " + $points + "\n";
		modify($jobOfferRating) {
			setRating($newRating),
			setDescription($newDescription)
		}
		String $jobPositionName = $jobOfferRating.getJobOffer().getPosition().getTitle();
		String $companyName = $jobOfferRating.getJobOffer().getCompany().getName();
		System.out.println("Phase 5 (languages) - JobOfferSuggestion with points " + $points + " for language " + $language + " for position " + $jobPositionName  + " in company " + $companyName);
end





package sbnz.rules;

import ftn.sbnz.events.MaliciousReviewerEvent;
import ftn.sbnz.events.DisabledUserEvent;
import ftn.sbnz.events.UserAccountStatusEvent;


salience 100
rule "UserReview attempted - check if he's banned - DisabledUserEvent"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId) and
        $event: DisabledUserEvent($userId == jobSeekerId)
    then
        modify ($fact) {
            setAllowed(false),
            setBanned(true)
        }
        delete($fact);
end

salience 75
rule "UserReview attempted - not allowed (malicious event in last 15 days)"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId, $eventTime: eventTime) and
        $maliciousEvent: MaliciousReviewerEvent(jobSeekerId == $userId, $endDate: endDate, $eventTime before $endDate)
    then
        modify ($fact) {
            setAllowed(false),
            setBanned(false)
        }
        delete($fact);
end

salience 50
rule "UserReview attempted - allowed (no malicious event in last 15 days)"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent($userId: userId, $eventTime: eventTime) and
        $maliciousEvent: MaliciousReviewerEvent(jobSeekerId == $userId, $endDate: endDate, $eventTime after $endDate) 
    then
        modify ($fact) {
            setAllowed(true),
            setBanned(false)
        }
        delete($fact);
end


salience 25
rule "UserReview attempted - if it passed all checks set to allow"
    agenda-group "user-account-status-check"
    when
        $fact: UserAccountStatusEvent()
    then
        modify ($fact) {
            setAllowed(true),
            setBanned(false)
        }
        delete($fact);
end
